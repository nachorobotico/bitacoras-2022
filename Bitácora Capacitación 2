Código:
#!/usr/bin/env python

import rospy #importar ros para python
from sensor_msgs.msg import Joy  # importar mensajes de ROS tipo String y tipo Int32
from geometry_msgs.msg import Twist # importar mensajes de ROS tipo geometry / Twist

def _linmap(argrange, tgtrange, arg):
	n = tgtrange[0]
	m = float(tgtrange[1]-tgtrange[0])/float(argrange[1]-argrange[0])
	return n + m * (arg-argrange[0])

def linmap(argrange, tgtrange, iterable):
	ret = [_linmap(argrange, tgtrange, arg) for arg in iterable]
	return ret

def allTheThings(B, controls):
	if B:
		controls = [0 for elem in controls]
	return (B, controls)

class Template(object):
	def __init__(self, args):
		super(Template, self).__init__()
		self.args = args
		self.sub = rospy.Subscriber("/duckiebot/joy", Joy, self.callback)


	#def publicar(self):

	def callback(self,msg):
		#print(msg.axes)
		#print(msg.buttons)
		B = msg.buttons[1]
		right_hor, right_ver = msg.axes[3:5]
		left_hor, left_ver = msg.axes[0:2]
		controls = (left_hor, left_ver, right_hor, right_ver)
		print(allTheThings(B, linmap([-1,1], [0,1], controls)))

def main():
	rospy.init_node('test') #creacion y registro del nodo!

	obj = Template('args') # Crea un objeto del tipo Template, cuya definicion se encuentra arriba

	#objeto.publicar() #llama al metodo publicar del objeto obj de tipo Template

	rospy.spin() #funcion de ROS que evita que el programa termine -  se debe usar en  Subscribers


if __name__ =='__main__':
	main()
  
  
  Bitácora:
  Para empezar está segunda capacitación, se presentó las herramientas para trabajar con ROS, las cuales serían necesarias para el desarrollo de los desafios.
  Además de las herramientas entregadas, se dió a conocer conceptos importantes relacionados con el trabajo, tales como: la definición de username, hostname, nodo en ROS, como crear ese nodo,
  como subscribirse a un nodo, como es la conexión SSH, etc. Todo esto mencionado fue muy útil para realizar el desfio semanal, y aprender un poco más sobre la computación.
  
  Al momento de enfrentarme a los desafios se notabá bastante complicado, dado que no tenía expereniencia con ROS, pero con la ayuda de las diapositivas y de los ayudantes,
  se logró entender todo, logrando terminar antes de la hora final de la clase. Lo más complicado de los desafios fue el entender cada uno de los conceptos importantes, 
  para poder llevarlos a la práctica en los desafios, luego de comprenderlos, se necesito de conocimiento de programación, sobre todo para definir las funciones correspondientes, 
  pero a pesar de todo lo mencionado, se logró completar el desafio de la capacitación 2.
  
